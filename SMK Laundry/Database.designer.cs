#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SMK_Laundry
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SMK_LAUNDRY")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertHeaderDeposit(HeaderDeposit instance);
    partial void UpdateHeaderDeposit(HeaderDeposit instance);
    partial void DeleteHeaderDeposit(HeaderDeposit instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    partial void InsertPackage(Package instance);
    partial void UpdatePackage(Package instance);
    partial void DeletePackage(Package instance);
    partial void InsertPrepaidPackage(PrepaidPackage instance);
    partial void UpdatePrepaidPackage(PrepaidPackage instance);
    partial void DeletePrepaidPackage(PrepaidPackage instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertUnit(Unit instance);
    partial void UpdateUnit(Unit instance);
    partial void DeleteUnit(Unit instance);
    partial void InsertDetailDeposit(DetailDeposit instance);
    partial void UpdateDetailDeposit(DetailDeposit instance);
    partial void DeleteDetailDeposit(DetailDeposit instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::SMK_Laundry.Properties.Settings.Default.SMK_LAUNDRYConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<HeaderDeposit> HeaderDeposits
		{
			get
			{
				return this.GetTable<HeaderDeposit>();
			}
		}
		
		public System.Data.Linq.Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		public System.Data.Linq.Table<Package> Packages
		{
			get
			{
				return this.GetTable<Package>();
			}
		}
		
		public System.Data.Linq.Table<PrepaidPackage> PrepaidPackages
		{
			get
			{
				return this.GetTable<PrepaidPackage>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<Unit> Units
		{
			get
			{
				return this.GetTable<Unit>();
			}
		}
		
		public System.Data.Linq.Table<DetailDeposit> DetailDeposits
		{
			get
			{
				return this.GetTable<DetailDeposit>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Service> _Services;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Category()
		{
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Service", Storage="_Services", ThisKey="Id", OtherKey="IdCategory")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _PhoneNumber;
		
		private string _Address;
		
		private EntitySet<HeaderDeposit> _HeaderDeposits;
		
		private EntitySet<PrepaidPackage> _PrepaidPackages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Customer()
		{
			this._HeaderDeposits = new EntitySet<HeaderDeposit>(new Action<HeaderDeposit>(this.attach_HeaderDeposits), new Action<HeaderDeposit>(this.detach_HeaderDeposits));
			this._PrepaidPackages = new EntitySet<PrepaidPackage>(new Action<PrepaidPackage>(this.attach_PrepaidPackages), new Action<PrepaidPackage>(this.detach_PrepaidPackages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_HeaderDeposit", Storage="_HeaderDeposits", ThisKey="Id", OtherKey="IdCustomer")]
		public EntitySet<HeaderDeposit> HeaderDeposits
		{
			get
			{
				return this._HeaderDeposits;
			}
			set
			{
				this._HeaderDeposits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_PrepaidPackage", Storage="_PrepaidPackages", ThisKey="Id", OtherKey="IdCustomer")]
		public EntitySet<PrepaidPackage> PrepaidPackages
		{
			get
			{
				return this._PrepaidPackages;
			}
			set
			{
				this._PrepaidPackages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HeaderDeposits(HeaderDeposit entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_HeaderDeposits(HeaderDeposit entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_PrepaidPackages(PrepaidPackage entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_PrepaidPackages(PrepaidPackage entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Password;
		
		private string _Name;
		
		private string _Email;
		
		private string _Address;
		
		private string _PhoneNumber;
		
		private System.DateTime _DateOfBirth;
		
		private int _IdJob;
		
		private decimal _Salary;
		
		private EntitySet<HeaderDeposit> _HeaderDeposits;
		
		private EntityRef<Job> _Job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnIdJobChanging(int value);
    partial void OnIdJobChanged();
    partial void OnSalaryChanging(decimal value);
    partial void OnSalaryChanged();
    #endregion
		
		public Employee()
		{
			this._HeaderDeposits = new EntitySet<HeaderDeposit>(new Action<HeaderDeposit>(this.attach_HeaderDeposits), new Action<HeaderDeposit>(this.detach_HeaderDeposits));
			this._Job = default(EntityRef<Job>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdJob", DbType="Int NOT NULL")]
		public int IdJob
		{
			get
			{
				return this._IdJob;
			}
			set
			{
				if ((this._IdJob != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdJobChanging(value);
					this.SendPropertyChanging();
					this._IdJob = value;
					this.SendPropertyChanged("IdJob");
					this.OnIdJobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Money NOT NULL")]
		public decimal Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_HeaderDeposit", Storage="_HeaderDeposits", ThisKey="Id", OtherKey="IdEmployee")]
		public EntitySet<HeaderDeposit> HeaderDeposits
		{
			get
			{
				return this._HeaderDeposits;
			}
			set
			{
				this._HeaderDeposits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_Employee", Storage="_Job", ThisKey="IdJob", OtherKey="Id", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._IdJob = value.Id;
					}
					else
					{
						this._IdJob = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HeaderDeposits(HeaderDeposit entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_HeaderDeposits(HeaderDeposit entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HeaderDeposit")]
	public partial class HeaderDeposit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdCustomer;
		
		private int _IdEmployee;
		
		private System.DateTime _TransactionDatetime;
		
		private System.Nullable<System.DateTime> _CompleteEstimationDatetime;
		
		private EntitySet<DetailDeposit> _DetailDeposits;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdCustomerChanging(int value);
    partial void OnIdCustomerChanged();
    partial void OnIdEmployeeChanging(int value);
    partial void OnIdEmployeeChanged();
    partial void OnTransactionDatetimeChanging(System.DateTime value);
    partial void OnTransactionDatetimeChanged();
    partial void OnCompleteEstimationDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCompleteEstimationDatetimeChanged();
    #endregion
		
		public HeaderDeposit()
		{
			this._DetailDeposits = new EntitySet<DetailDeposit>(new Action<DetailDeposit>(this.attach_DetailDeposits), new Action<DetailDeposit>(this.detach_DetailDeposits));
			this._Customer = default(EntityRef<Customer>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCustomer", DbType="Int NOT NULL")]
		public int IdCustomer
		{
			get
			{
				return this._IdCustomer;
			}
			set
			{
				if ((this._IdCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCustomerChanging(value);
					this.SendPropertyChanging();
					this._IdCustomer = value;
					this.SendPropertyChanged("IdCustomer");
					this.OnIdCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdEmployee", DbType="Int NOT NULL")]
		public int IdEmployee
		{
			get
			{
				return this._IdEmployee;
			}
			set
			{
				if ((this._IdEmployee != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEmployeeChanging(value);
					this.SendPropertyChanging();
					this._IdEmployee = value;
					this.SendPropertyChanged("IdEmployee");
					this.OnIdEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDatetime", DbType="DateTime NOT NULL")]
		public System.DateTime TransactionDatetime
		{
			get
			{
				return this._TransactionDatetime;
			}
			set
			{
				if ((this._TransactionDatetime != value))
				{
					this.OnTransactionDatetimeChanging(value);
					this.SendPropertyChanging();
					this._TransactionDatetime = value;
					this.SendPropertyChanged("TransactionDatetime");
					this.OnTransactionDatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompleteEstimationDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CompleteEstimationDatetime
		{
			get
			{
				return this._CompleteEstimationDatetime;
			}
			set
			{
				if ((this._CompleteEstimationDatetime != value))
				{
					this.OnCompleteEstimationDatetimeChanging(value);
					this.SendPropertyChanging();
					this._CompleteEstimationDatetime = value;
					this.SendPropertyChanged("CompleteEstimationDatetime");
					this.OnCompleteEstimationDatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HeaderDeposit_DetailDeposit", Storage="_DetailDeposits", ThisKey="Id", OtherKey="IdDeposit")]
		public EntitySet<DetailDeposit> DetailDeposits
		{
			get
			{
				return this._DetailDeposits;
			}
			set
			{
				this._DetailDeposits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_HeaderDeposit", Storage="_Customer", ThisKey="IdCustomer", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.HeaderDeposits.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.HeaderDeposits.Add(this);
						this._IdCustomer = value.Id;
					}
					else
					{
						this._IdCustomer = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_HeaderDeposit", Storage="_Employee", ThisKey="IdEmployee", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.HeaderDeposits.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.HeaderDeposits.Add(this);
						this._IdEmployee = value.Id;
					}
					else
					{
						this._IdEmployee = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailDeposits(DetailDeposit entity)
		{
			this.SendPropertyChanging();
			entity.HeaderDeposit = this;
		}
		
		private void detach_DetailDeposits(DetailDeposit entity)
		{
			this.SendPropertyChanging();
			entity.HeaderDeposit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Job")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Job()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_Employee", Storage="_Employees", ThisKey="Id", OtherKey="IdJob")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Package")]
	public partial class Package : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdService;
		
		private int _TotalUnit;
		
		private int _Price;
		
		private EntitySet<PrepaidPackage> _PrepaidPackages;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdServiceChanging(int value);
    partial void OnIdServiceChanged();
    partial void OnTotalUnitChanging(int value);
    partial void OnTotalUnitChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    #endregion
		
		public Package()
		{
			this._PrepaidPackages = new EntitySet<PrepaidPackage>(new Action<PrepaidPackage>(this.attach_PrepaidPackages), new Action<PrepaidPackage>(this.detach_PrepaidPackages));
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdService", DbType="Int NOT NULL")]
		public int IdService
		{
			get
			{
				return this._IdService;
			}
			set
			{
				if ((this._IdService != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdServiceChanging(value);
					this.SendPropertyChanging();
					this._IdService = value;
					this.SendPropertyChanged("IdService");
					this.OnIdServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalUnit", DbType="Int NOT NULL")]
		public int TotalUnit
		{
			get
			{
				return this._TotalUnit;
			}
			set
			{
				if ((this._TotalUnit != value))
				{
					this.OnTotalUnitChanging(value);
					this.SendPropertyChanging();
					this._TotalUnit = value;
					this.SendPropertyChanged("TotalUnit");
					this.OnTotalUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Package_PrepaidPackage", Storage="_PrepaidPackages", ThisKey="Id", OtherKey="IdPackage")]
		public EntitySet<PrepaidPackage> PrepaidPackages
		{
			get
			{
				return this._PrepaidPackages;
			}
			set
			{
				this._PrepaidPackages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Package", Storage="_Service", ThisKey="IdService", OtherKey="Id", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Packages.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Packages.Add(this);
						this._IdService = value.Id;
					}
					else
					{
						this._IdService = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrepaidPackages(PrepaidPackage entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}
		
		private void detach_PrepaidPackages(PrepaidPackage entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrepaidPackage")]
	public partial class PrepaidPackage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdCustomer;
		
		private int _IdPackage;
		
		private int _Price;
		
		private System.DateTime _StartDateTime;
		
		private System.Nullable<System.DateTime> _CompletedDatetime;
		
		private EntitySet<DetailDeposit> _DetailDeposits;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Package> _Package;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdCustomerChanging(int value);
    partial void OnIdCustomerChanged();
    partial void OnIdPackageChanging(int value);
    partial void OnIdPackageChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnStartDateTimeChanging(System.DateTime value);
    partial void OnStartDateTimeChanged();
    partial void OnCompletedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCompletedDatetimeChanged();
    #endregion
		
		public PrepaidPackage()
		{
			this._DetailDeposits = new EntitySet<DetailDeposit>(new Action<DetailDeposit>(this.attach_DetailDeposits), new Action<DetailDeposit>(this.detach_DetailDeposits));
			this._Customer = default(EntityRef<Customer>);
			this._Package = default(EntityRef<Package>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCustomer", DbType="Int NOT NULL")]
		public int IdCustomer
		{
			get
			{
				return this._IdCustomer;
			}
			set
			{
				if ((this._IdCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCustomerChanging(value);
					this.SendPropertyChanging();
					this._IdCustomer = value;
					this.SendPropertyChanged("IdCustomer");
					this.OnIdCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPackage", DbType="Int NOT NULL")]
		public int IdPackage
		{
			get
			{
				return this._IdPackage;
			}
			set
			{
				if ((this._IdPackage != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPackageChanging(value);
					this.SendPropertyChanging();
					this._IdPackage = value;
					this.SendPropertyChanged("IdPackage");
					this.OnIdPackageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartDateTime
		{
			get
			{
				return this._StartDateTime;
			}
			set
			{
				if ((this._StartDateTime != value))
				{
					this.OnStartDateTimeChanging(value);
					this.SendPropertyChanging();
					this._StartDateTime = value;
					this.SendPropertyChanged("StartDateTime");
					this.OnStartDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CompletedDatetime
		{
			get
			{
				return this._CompletedDatetime;
			}
			set
			{
				if ((this._CompletedDatetime != value))
				{
					this.OnCompletedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._CompletedDatetime = value;
					this.SendPropertyChanged("CompletedDatetime");
					this.OnCompletedDatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrepaidPackage_DetailDeposit", Storage="_DetailDeposits", ThisKey="Id", OtherKey="IdPrepaidPackage")]
		public EntitySet<DetailDeposit> DetailDeposits
		{
			get
			{
				return this._DetailDeposits;
			}
			set
			{
				this._DetailDeposits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_PrepaidPackage", Storage="_Customer", ThisKey="IdCustomer", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.PrepaidPackages.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.PrepaidPackages.Add(this);
						this._IdCustomer = value.Id;
					}
					else
					{
						this._IdCustomer = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Package_PrepaidPackage", Storage="_Package", ThisKey="IdPackage", OtherKey="Id", IsForeignKey=true)]
		public Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				Package previousValue = this._Package.Entity;
				if (((previousValue != value) 
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.PrepaidPackages.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.PrepaidPackages.Add(this);
						this._IdPackage = value.Id;
					}
					else
					{
						this._IdPackage = default(int);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailDeposits(DetailDeposit entity)
		{
			this.SendPropertyChanging();
			entity.PrepaidPackage = this;
		}
		
		private void detach_DetailDeposits(DetailDeposit entity)
		{
			this.SendPropertyChanging();
			entity.PrepaidPackage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _IdCategory;
		
		private int _IdUnit;
		
		private int _PriceUnit;
		
		private int _EstimationDuration;
		
		private EntitySet<Package> _Packages;
		
		private EntitySet<DetailDeposit> _DetailDeposits;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Unit> _Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdCategoryChanging(int value);
    partial void OnIdCategoryChanged();
    partial void OnIdUnitChanging(int value);
    partial void OnIdUnitChanged();
    partial void OnPriceUnitChanging(int value);
    partial void OnPriceUnitChanged();
    partial void OnEstimationDurationChanging(int value);
    partial void OnEstimationDurationChanged();
    #endregion
		
		public Service()
		{
			this._Packages = new EntitySet<Package>(new Action<Package>(this.attach_Packages), new Action<Package>(this.detach_Packages));
			this._DetailDeposits = new EntitySet<DetailDeposit>(new Action<DetailDeposit>(this.attach_DetailDeposits), new Action<DetailDeposit>(this.detach_DetailDeposits));
			this._Category = default(EntityRef<Category>);
			this._Unit = default(EntityRef<Unit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCategory", DbType="Int NOT NULL")]
		public int IdCategory
		{
			get
			{
				return this._IdCategory;
			}
			set
			{
				if ((this._IdCategory != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCategoryChanging(value);
					this.SendPropertyChanging();
					this._IdCategory = value;
					this.SendPropertyChanged("IdCategory");
					this.OnIdCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUnit", DbType="Int NOT NULL")]
		public int IdUnit
		{
			get
			{
				return this._IdUnit;
			}
			set
			{
				if ((this._IdUnit != value))
				{
					if (this._Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUnitChanging(value);
					this.SendPropertyChanging();
					this._IdUnit = value;
					this.SendPropertyChanged("IdUnit");
					this.OnIdUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceUnit", DbType="Int NOT NULL")]
		public int PriceUnit
		{
			get
			{
				return this._PriceUnit;
			}
			set
			{
				if ((this._PriceUnit != value))
				{
					this.OnPriceUnitChanging(value);
					this.SendPropertyChanging();
					this._PriceUnit = value;
					this.SendPropertyChanged("PriceUnit");
					this.OnPriceUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimationDuration", DbType="Int NOT NULL")]
		public int EstimationDuration
		{
			get
			{
				return this._EstimationDuration;
			}
			set
			{
				if ((this._EstimationDuration != value))
				{
					this.OnEstimationDurationChanging(value);
					this.SendPropertyChanging();
					this._EstimationDuration = value;
					this.SendPropertyChanged("EstimationDuration");
					this.OnEstimationDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Package", Storage="_Packages", ThisKey="Id", OtherKey="IdService")]
		public EntitySet<Package> Packages
		{
			get
			{
				return this._Packages;
			}
			set
			{
				this._Packages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_DetailDeposit", Storage="_DetailDeposits", ThisKey="Id", OtherKey="IdService")]
		public EntitySet<DetailDeposit> DetailDeposits
		{
			get
			{
				return this._DetailDeposits;
			}
			set
			{
				this._DetailDeposits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Service", Storage="_Category", ThisKey="IdCategory", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._IdCategory = value.Id;
					}
					else
					{
						this._IdCategory = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_Service", Storage="_Unit", ThisKey="IdUnit", OtherKey="Id", IsForeignKey=true)]
		public Unit Unit
		{
			get
			{
				return this._Unit.Entity;
			}
			set
			{
				Unit previousValue = this._Unit.Entity;
				if (((previousValue != value) 
							|| (this._Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Unit.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._IdUnit = value.Id;
					}
					else
					{
						this._IdUnit = default(int);
					}
					this.SendPropertyChanged("Unit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Packages(Package entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Packages(Package entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_DetailDeposits(DetailDeposit entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_DetailDeposits(DetailDeposit entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Unit")]
	public partial class Unit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Service> _Services;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Unit()
		{
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_Service", Storage="_Services", ThisKey="Id", OtherKey="IdUnit")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Unit = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Unit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailDeposit")]
	public partial class DetailDeposit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdDeposit;
		
		private int _IdService;
		
		private System.Nullable<int> _IdPrepaidPackage;
		
		private int _PriceUnit;
		
		private double _TotalUnit;
		
		private System.Nullable<System.DateTime> _CompletedDatetime;
		
		private EntityRef<HeaderDeposit> _HeaderDeposit;
		
		private EntityRef<PrepaidPackage> _PrepaidPackage;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdDepositChanging(int value);
    partial void OnIdDepositChanged();
    partial void OnIdServiceChanging(int value);
    partial void OnIdServiceChanged();
    partial void OnIdPrepaidPackageChanging(System.Nullable<int> value);
    partial void OnIdPrepaidPackageChanged();
    partial void OnPriceUnitChanging(int value);
    partial void OnPriceUnitChanged();
    partial void OnTotalUnitChanging(double value);
    partial void OnTotalUnitChanged();
    partial void OnCompletedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCompletedDatetimeChanged();
    #endregion
		
		public DetailDeposit()
		{
			this._HeaderDeposit = default(EntityRef<HeaderDeposit>);
			this._PrepaidPackage = default(EntityRef<PrepaidPackage>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDeposit", DbType="Int NOT NULL")]
		public int IdDeposit
		{
			get
			{
				return this._IdDeposit;
			}
			set
			{
				if ((this._IdDeposit != value))
				{
					if (this._HeaderDeposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdDepositChanging(value);
					this.SendPropertyChanging();
					this._IdDeposit = value;
					this.SendPropertyChanged("IdDeposit");
					this.OnIdDepositChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdService", DbType="Int NOT NULL")]
		public int IdService
		{
			get
			{
				return this._IdService;
			}
			set
			{
				if ((this._IdService != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdServiceChanging(value);
					this.SendPropertyChanging();
					this._IdService = value;
					this.SendPropertyChanged("IdService");
					this.OnIdServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPrepaidPackage", DbType="Int")]
		public System.Nullable<int> IdPrepaidPackage
		{
			get
			{
				return this._IdPrepaidPackage;
			}
			set
			{
				if ((this._IdPrepaidPackage != value))
				{
					if (this._PrepaidPackage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPrepaidPackageChanging(value);
					this.SendPropertyChanging();
					this._IdPrepaidPackage = value;
					this.SendPropertyChanged("IdPrepaidPackage");
					this.OnIdPrepaidPackageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceUnit", DbType="Int NOT NULL")]
		public int PriceUnit
		{
			get
			{
				return this._PriceUnit;
			}
			set
			{
				if ((this._PriceUnit != value))
				{
					this.OnPriceUnitChanging(value);
					this.SendPropertyChanging();
					this._PriceUnit = value;
					this.SendPropertyChanged("PriceUnit");
					this.OnPriceUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalUnit", DbType="Float NOT NULL")]
		public double TotalUnit
		{
			get
			{
				return this._TotalUnit;
			}
			set
			{
				if ((this._TotalUnit != value))
				{
					this.OnTotalUnitChanging(value);
					this.SendPropertyChanging();
					this._TotalUnit = value;
					this.SendPropertyChanged("TotalUnit");
					this.OnTotalUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CompletedDatetime
		{
			get
			{
				return this._CompletedDatetime;
			}
			set
			{
				if ((this._CompletedDatetime != value))
				{
					this.OnCompletedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._CompletedDatetime = value;
					this.SendPropertyChanged("CompletedDatetime");
					this.OnCompletedDatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HeaderDeposit_DetailDeposit", Storage="_HeaderDeposit", ThisKey="IdDeposit", OtherKey="Id", IsForeignKey=true)]
		public HeaderDeposit HeaderDeposit
		{
			get
			{
				return this._HeaderDeposit.Entity;
			}
			set
			{
				HeaderDeposit previousValue = this._HeaderDeposit.Entity;
				if (((previousValue != value) 
							|| (this._HeaderDeposit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HeaderDeposit.Entity = null;
						previousValue.DetailDeposits.Remove(this);
					}
					this._HeaderDeposit.Entity = value;
					if ((value != null))
					{
						value.DetailDeposits.Add(this);
						this._IdDeposit = value.Id;
					}
					else
					{
						this._IdDeposit = default(int);
					}
					this.SendPropertyChanged("HeaderDeposit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrepaidPackage_DetailDeposit", Storage="_PrepaidPackage", ThisKey="IdPrepaidPackage", OtherKey="Id", IsForeignKey=true)]
		public PrepaidPackage PrepaidPackage
		{
			get
			{
				return this._PrepaidPackage.Entity;
			}
			set
			{
				PrepaidPackage previousValue = this._PrepaidPackage.Entity;
				if (((previousValue != value) 
							|| (this._PrepaidPackage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrepaidPackage.Entity = null;
						previousValue.DetailDeposits.Remove(this);
					}
					this._PrepaidPackage.Entity = value;
					if ((value != null))
					{
						value.DetailDeposits.Add(this);
						this._IdPrepaidPackage = value.Id;
					}
					else
					{
						this._IdPrepaidPackage = default(Nullable<int>);
					}
					this.SendPropertyChanged("PrepaidPackage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_DetailDeposit", Storage="_Service", ThisKey="IdService", OtherKey="Id", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.DetailDeposits.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.DetailDeposits.Add(this);
						this._IdService = value.Id;
					}
					else
					{
						this._IdService = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
